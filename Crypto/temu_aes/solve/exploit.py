# from pwn import process
import tqdm
from aes import AES, rcon, sbox
from pwn import process, remote

if __name__ == "__main__":
    p = process(["python3", "chall.py"])
    req = {
        0x0: lambda n, keys: keys[n][0x0] != -1 and keys[n - 1][13] != -1,
        0x1: lambda n, keys: keys[n][0x1] != -1 and keys[n - 1][14] != -1,
        0x2: lambda n, keys: keys[n][0x2] != -1 and keys[n - 1][15] != -1,
        0x3: lambda n, keys: keys[n][0x3] != -1 and keys[n - 1][12] != -1,
    }

    for i in range(4, 16):
        req[i] = lambda n, keys: keys[n][i] != -1 and keys[n][i - 4] != -1

    enc_dict = {}

    key = b""

    key10 = [-1] * 16
    for i in range(16):
        if i == 8:
            key10[8] = 0
            continue
        payload = b"00" * 16 + b"00" * (8 + i)
        p.sendline(payload)
        a = p.recvline().decode().strip().split(":")[-1].strip()
        print(a)
        enc = bytes.fromhex(a)
        enc_dict[bytes.fromhex(payload.decode())] = enc
        key10[i] = enc[8] ^ enc[-8]
        p.clean()

    for guess8 in tqdm.tqdm(range(256)):
        keys = [[-1] * 16 for _ in range(10)] + [
            [(i ^ guess8, -1)[i == -1] for i in key10]
        ]

        for round in range(9, -1, -1):
            for i in range(15, -1, -1):
                if not req[i](round + 1, keys):
                    continue
                if i < 4:
                    keys[round][i] = (
                        keys[round + 1][i]
                        ^ sbox[keys[round][[13, 14, 15, 12][i]]]
                        ^ rcon[round][i]
                    )
                else:
                    keys[round][i] = keys[round + 1][i] ^ keys[round + 1][i - 4]

        a = AES(bytes(keys[0]))
        a.round_keys = keys
        found = True

        for i in enc_dict:
            if a.encrypt(i) != enc_dict[i]:
                found = False
                break

        if found:
            key = bytes(keys[0]).hex().encode()
            break

    if not key:
        raise ValueError("RIP...not found")
    print(key)
    p.sendline(key)
    print(p.recvall().decode(), end="")
